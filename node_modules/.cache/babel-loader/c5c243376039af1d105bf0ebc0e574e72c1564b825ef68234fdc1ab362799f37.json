{"ast":null,"code":"var _jsxFileName = \"/home/vansh/Desktop/react-task-tracker/src/App.js\",\n  _s = $RefreshSig$();\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport { useState, useEffect } from 'react';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let val;\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    async function getTask() {\n      const taskFromServer = await fetchTask();\n      setTasks(taskFromServer);\n    }\n    getTask();\n  }, []);\n  async function fetchTask() {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }\n  async function fetchTas() {\n    const res = await fetch(`http://localhost:5000/tasks/{id}`);\n    const data = await res.json();\n    return data;\n  }\n  async function toogleReminder(id) {\n    const tasktotoggle = await fetchTas(id);\n    const uptask = {\n      ...tasktotoggle,\n      reminder: !tasktotoggle.Reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(uptask)\n    });\n    val = id;\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      reminder: !task.reminder\n    } : task));\n  }\n  async function deleteTask(id) {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    val = id;\n    setTasks(tasks.filter(task => task.id !== id));\n  }\n  async function addTask(task) {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n    // const id = Math.floor(Math.random()*1000)+1;\n    // const newTask = {id ,...task} \n    // setTasks([...tasks, newTask]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), showAddTask ? /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 22\n    }, this) : '', tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToogle: toogleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 28\n    }, this) : 'No Task']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"omhOqAj9hChsUNMsWhoh781iSV4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Tasks","useState","useEffect","AddTask","App","val","showAddTask","setShowAddTask","tasks","setTasks","getTask","taskFromServer","fetchTask","res","fetch","data","json","fetchTas","toogleReminder","id","tasktotoggle","uptask","reminder","Reminder","method","headers","body","JSON","stringify","map","task","deleteTask","filter","addTask","length"],"sources":["/home/vansh/Desktop/react-task-tracker/src/App.js"],"sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks';\nimport {useState,useEffect} from 'react'\nimport AddTask from './components/AddTask';\nfunction App() {\n  let val ;\n  const [showAddTask , setShowAddTask] = useState(false);\n  const [tasks , setTasks] = useState([])\n\n  useEffect(() => {\n    async function getTask(){\n      const taskFromServer = await fetchTask();\n      setTasks(taskFromServer);\n    }\n    getTask();\n  }, []);\n\n  async function fetchTask(){\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }\n\n  async function fetchTas(){\n    const res = await fetch(`http://localhost:5000/tasks/{id}`);\n    const data = await res.json();\n    return data;\n  }\n\n\nasync function toogleReminder(id){\n  const tasktotoggle =await fetchTas(id);\n  const uptask = {...tasktotoggle,reminder:!tasktotoggle.Reminder}\n  const res=await fetch(`http://localhost:5000/tasks/${id}`,{\n    method: 'POST',\n    headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(uptask)\n  });\n  \n  val =id;\n  setTasks(\n    tasks.map((task) =>\n      task.id === id ? { ...task, reminder: !task.reminder } : task\n    )\n  )\n}\n\nasync function deleteTask(id) {\n  await fetch(`http://localhost:5000/tasks/${id}`,{\n    method:'DELETE'\n  })\n  val =id;\n  setTasks(tasks.filter((task) => task.id !==id));\n}\n\nasync function addTask(task){\n\n  const res =await fetch('http://localhost:5000/tasks', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(task)\n  })\n\n  const data = await  res.json();    \n  setTasks([...tasks , data]);\n  // const id = Math.floor(Math.random()*1000)+1;\n  // const newTask = {id ,...task} \n  // setTasks([...tasks, newTask]);\n}\n\n\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask}/>\n      {showAddTask ? <AddTask onAdd={addTask}/> : ''}\n      {tasks.length >0  ? (< Tasks tasks={tasks} onDelete={deleteTask} onToogle={toogleReminder}/>) : ('No Task') }\n    </div>\n  );\n}\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}